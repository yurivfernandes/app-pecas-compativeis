import 'react-native-gesture-handler/jestSetup';\n\n// Mock react-native modules\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock')\n);\n\n// Mock react-native-safe-area-context\njest.mock('react-native-safe-area-context', () => {\n  const inset = { top: 0, right: 0, bottom: 0, left: 0 };\n  return {\n    SafeAreaProvider: ({ children }) => children,\n    SafeAreaConsumer: ({ children }) => children(inset),\n    useSafeAreaInsets: () => inset,\n    useSafeAreaFrame: () => ({ x: 0, y: 0, width: 390, height: 844 }),\n  };\n});\n\n// Mock Expo modules\njest.mock('expo-constants', () => ({\n  default: {\n    appOwnership: 'standalone',\n    expoVersion: '1.0.0',\n  },\n}));\n\njest.mock('expo-font', () => ({\n  loadAsync: jest.fn(),\n  isLoaded: jest.fn(() => true),\n}));\n\njest.mock('expo-asset', () => ({\n  Asset: {\n    loadAsync: jest.fn(),\n  },\n}));\n\n// Mock react-navigation\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      navigate: jest.fn(),\n      goBack: jest.fn(),\n      dispatch: jest.fn(),\n      setOptions: jest.fn(),\n      isFocused: jest.fn(() => true),\n      addListener: jest.fn(() => jest.fn()),\n    }),\n    useRoute: () => ({\n      params: {},\n      name: 'TestRoute',\n      key: 'test-key',\n    }),\n    useFocusEffect: jest.fn(),\n    useIsFocused: () => true,\n  };\n});\n\n// Mock Dimensions\njest.mock('react-native', () => {\n  const RN = jest.requireActual('react-native');\n  return {\n    ...RN,\n    Dimensions: {\n      get: jest.fn(() => ({ width: 375, height: 812 })),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n    },\n    Platform: {\n      ...RN.Platform,\n      OS: 'ios',\n      select: jest.fn((obj) => obj.ios || obj.default),\n    },\n    NativeModules: {\n      ...RN.NativeModules,\n      RNGestureHandlerModule: {\n        attachGestureHandler: jest.fn(),\n        createGestureHandler: jest.fn(),\n        dropGestureHandler: jest.fn(),\n        updateGestureHandler: jest.fn(),\n        State: {},\n        Directions: {},\n      },\n    },\n  };\n});\n\n// Mock vector icons\njest.mock('@expo/vector-icons', () => ({\n  Ionicons: 'Ionicons',\n  MaterialIcons: 'MaterialIcons',\n  FontAwesome: 'FontAwesome',\n}));\n\n// Mock react-native-reanimated\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n  Reanimated.default.call = () => {};\n  return Reanimated;\n});\n\n// Mock Linking\njest.mock('react-native/Libraries/Linking/Linking', () => ({\n  openURL: jest.fn(() => Promise.resolve()),\n  canOpenURL: jest.fn(() => Promise.resolve(true)),\n  getInitialURL: jest.fn(() => Promise.resolve(null)),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n}));\n\n// Mock Share\njest.mock('react-native/Libraries/Share/Share', () => ({\n  share: jest.fn(() => Promise.resolve()),\n}));\n\n// Mock Alert\njest.mock('react-native/Libraries/Alert/Alert', () => ({\n  alert: jest.fn(),\n}));\n\n// Mock console methods to reduce noise in tests\nglobal.console = {\n  ...console,\n  log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n};\n\n// Mock global fetch\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    ok: true,\n    json: () => Promise.resolve({}),\n    text: () => Promise.resolve(''),\n  })\n);\n\n// Mock setTimeout and setInterval for fake timers\nglobal.setTimeout = jest.fn((cb) => cb());\nglobal.setInterval = jest.fn((cb) => cb());\nglobal.clearTimeout = jest.fn();\nglobal.clearInterval = jest.fn();\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn(() => ({\n  observe: jest.fn(),\n  disconnect: jest.fn(),\n  unobserve: jest.fn(),\n}));\n\n// Mock ResizeObserver\nglobal.ResizeObserver = jest.fn(() => ({\n  observe: jest.fn(),\n  disconnect: jest.fn(),\n  unobserve: jest.fn(),\n}));\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock window.location\nObject.defineProperty(window, 'location', {\n  value: {\n    href: 'http://localhost',\n    origin: 'http://localhost',\n    protocol: 'http:',\n    host: 'localhost',\n    hostname: 'localhost',\n    port: '',\n    pathname: '/',\n    search: '',\n    hash: '',\n    reload: jest.fn(),\n    assign: jest.fn(),\n    replace: jest.fn(),\n  },\n  writable: true,\n});\n\n// Mock navigator\nObject.defineProperty(window, 'navigator', {\n  value: {\n    userAgent: 'jest',\n    platform: 'MacIntel',\n    language: 'en-US',\n    languages: ['en-US', 'en'],\n    onLine: true,\n  },\n  writable: true,\n});\n\n// Setup test environment\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\n// Cleanup after tests\nafterEach(() => {\n  jest.clearAllTimers();\n});"} 
ToolResult: SUCCESS - Created the golf-mk3-app/jest.setup.js file. 
<function_calls>
<invoke name="fsWrite">
<parameter name="path">golf-mk3-app/__tests__/utils/responsive.test.ts