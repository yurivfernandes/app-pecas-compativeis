import { Alert, Platform } from 'react-native';
import Share from 'react-native-share';

interface ProtectionEvent {
  type: 'screenshot' | 'recording' | 'data_extraction';
  timestamp: number;
  platform: string;
  details?: any;
}

class ProtectionService {
  private static instance: ProtectionService;
  private violationCount = 0;
  private lastViolationTime = 0;
  private isProtectionEnabled = true;

  private constructor() {}

  static getInstance(): ProtectionService {
    if (!ProtectionService.instance) {
      ProtectionService.instance = new ProtectionService();
    }
    return ProtectionService.instance;
  }

  // Habilitar/desabilitar prote√ß√£o
  setProtectionEnabled(enabled: boolean): void {
    this.isProtectionEnabled = enabled;
  }

  // Detectar tentativa de screenshot
  handleScreenshotDetected(): void {
    if (!this.isProtectionEnabled) return;

    const now = Date.now();
    this.violationCount++;
    this.lastViolationTime = now;

    // Log da viola√ß√£o
    this.logViolation({
      type: 'screenshot',
      timestamp: now,
      platform: Platform.OS,
      details: {
        violationCount: this.violationCount,
        timeSinceLastViolation: now - this.lastViolationTime
      }
    });

    // Mostrar alerta educativo
    this.showScreenshotAlert();
  }

  // Detectar grava√ß√£o de tela
  handleScreenRecordingDetected(): void {
    if (!this.isProtectionEnabled) return;

    const now = Date.now();
    this.violationCount++;

    this.logViolation({
      type: 'recording',
      timestamp: now,
      platform: Platform.OS,
      details: {
        violationCount: this.violationCount
      }
    });

    // Mostrar alerta mais severo para grava√ß√£o
    this.showRecordingAlert();
  }

  // Mostrar alerta de screenshot
  private showScreenshotAlert(): void {
    Alert.alert(
      'üì∏ Screenshot Detectado',
      'Este conte√∫do √© protegido por direitos autorais.\n\nPara compartilhar informa√ß√µes do app, use o bot√£o de compartilhamento oficial.',
      [
        {
          text: 'Compartilhar App',
          onPress: () => this.shareAppOfficial(),
          style: 'default'
        },
        {
          text: 'Entendi',
          style: 'cancel'
        }
      ],
      { 
        cancelable: false,
        onDismiss: () => this.trackAlertDismissed('screenshot')
      }
    );
  }

  // Mostrar alerta de grava√ß√£o
  private showRecordingAlert(): void {
    Alert.alert(
      'üé• Grava√ß√£o de Tela Detectada',
      'A grava√ß√£o de tela deste aplicativo n√£o √© permitida.\n\nO conte√∫do √© protegido por direitos autorais da Falando de GTI.',
      [
        {
          text: 'Compartilhar App',
          onPress: () => this.shareAppOfficial(),
          style: 'default'
        },
        {
          text: 'Parar Grava√ß√£o',
          style: 'destructive'
        }
      ],
      { 
        cancelable: false,
        onDismiss: () => this.trackAlertDismissed('recording')
      }
    );
  }

  // Compartilhar app oficialmente
  private async shareAppOfficial(): Promise<void> {
    try {
      const shareOptions = {
        title: 'App Pe√ßas Compat√≠veis Golf MK3',
        message: 'üöó Confira este app incr√≠vel para Golf MK3!\n\n' +
                 '‚úÖ Pe√ßas compat√≠veis com pre√ßos\n' +
                 'üé® Tabela completa de cores VW\n' +
                 '‚ö° Mapa interativo de fus√≠veis\n\n' +
                 'Desenvolvido por Falando de GTI:\n' +
                 'https://app.falandodegti.com.br',
        url: 'https://app.falandodegti.com.br',
      };

      await Share.open(shareOptions);
      
      // Track compartilhamento via alerta
      this.trackShare('alert_share', 'screenshot_protection');
    } catch (error) {
      console.error('Erro ao compartilhar via alerta:', error);
    }
  }

  // Gerar watermark din√¢mico
  generateWatermarkText(): string {
    const timestamp = new Date().toISOString().slice(0, 10);
    const baseText = '¬© Falando de GTI - app.falandodegti.com.br';
    
    // Adicionar timestamp para tornar √∫nico
    return `${baseText} - ${timestamp}`;
  }

  // Validar integridade dos dados
  validateDataIntegrity(data: any, expectedHash?: string): boolean {
    try {
      const dataString = JSON.stringify(data);
      const currentHash = this.generateSimpleHash(dataString);
      
      if (expectedHash && currentHash !== expectedHash) {
        this.logViolation({
          type: 'data_extraction',
          timestamp: Date.now(),
          platform: Platform.OS,
          details: {
            expectedHash,
            currentHash,
            dataSize: dataString.length
          }
        });
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Erro na valida√ß√£o de integridade:', error);
      return false;
    }
  }

  // Gerar hash simples para valida√ß√£o
  private generateSimpleHash(str: string): string {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString();
  }

  // Log de viola√ß√µes
  private logViolation(event: ProtectionEvent): void {
    console.warn('Security violation detected:', event);
    
    // TODO: Enviar para sistema de monitoramento
    // this.sendToMonitoring(event);
    
    // Armazenar localmente para an√°lise
    this.storeViolationLocally(event);
  }

  // Armazenar viola√ß√£o localmente
  private storeViolationLocally(event: ProtectionEvent): void {
    try {
      // TODO: Implementar storage local seguro
      // AsyncStorage.setItem(`violation_${event.timestamp}`, JSON.stringify(event));
    } catch (error) {
      console.error('Erro ao armazenar viola√ß√£o:', error);
    }
  }

  // Track compartilhamento
  private trackShare(source: string, context: string): void {
    console.log('Share tracked from protection:', { source, context, timestamp: Date.now() });
    
    // TODO: Integrar com AnalyticsService
    // AnalyticsService.trackEvent('share_from_protection', { source, context });
  }

  // Track dismissal de alertas
  private trackAlertDismissed(alertType: string): void {
    console.log('Protection alert dismissed:', { alertType, timestamp: Date.now() });
    
    // TODO: Integrar com AnalyticsService
    // AnalyticsService.trackEvent('protection_alert_dismissed', { alertType });
  }

  // Obter estat√≠sticas de viola√ß√µes
  getViolationStats(): { count: number; lastViolation: number } {
    return {
      count: this.violationCount,
      lastViolation: this.lastViolationTime
    };
  }

  // Reset estat√≠sticas
  resetViolationStats(): void {
    this.violationCount = 0;
    this.lastViolationTime = 0;
  }

  // Verificar se deve mostrar toast de copyright
  shouldShowCopyrightToast(): boolean {
    const now = Date.now();
    const fiveMinutes = 5 * 60 * 1000;
    
    // Mostrar toast a cada 5 minutos de uso
    return (now - this.lastViolationTime) > fiveMinutes;
  }

  // Gerar mensagem de copyright para toast
  generateCopyrightToastMessage(): string {
    const messages = [
      '¬© Falando de GTI - Conte√∫do protegido',
      '¬© 2024 Falando de GTI - Todos os direitos reservados',
      'app.falandodegti.com.br - Conte√∫do original',
      '¬© Falando de GTI - Reprodu√ß√£o n√£o autorizada'
    ];
    
    return messages[Math.floor(Math.random() * messages.length)];
  }

  // Verificar se app est√° sendo executado em emulador (prote√ß√£o adicional)
  isRunningOnEmulator(): boolean {
    if (Platform.OS === 'android') {
      // Verifica√ß√µes b√°sicas para Android
      return (
        Platform.constants?.Brand?.toLowerCase().includes('generic') ||
        Platform.constants?.Model?.toLowerCase().includes('emulator') ||
        Platform.constants?.Manufacturer?.toLowerCase().includes('genymotion')
      );
    }
    
    if (Platform.OS === 'ios') {
      // Verifica√ß√µes b√°sicas para iOS Simulator
      return Platform.constants?.utsname?.machine?.includes('x86');
    }
    
    return false;
  }

  // Aplicar prote√ß√µes espec√≠ficas por plataforma
  applyPlatformSpecificProtections(): void {
    if (Platform.OS === 'android') {
      // Prote√ß√µes espec√≠ficas do Android
      this.applyAndroidProtections();
    } else if (Platform.OS === 'ios') {
      // Prote√ß√µes espec√≠ficas do iOS
      this.applyIOSProtections();
    }
  }

  private applyAndroidProtections(): void {
    // TODO: Implementar FLAG_SECURE via m√≥dulo nativo
    console.log('Applying Android-specific protections');
  }

  private applyIOSProtections(): void {
    // TODO: Implementar prote√ß√µes espec√≠ficas do iOS
    console.log('Applying iOS-specific protections');
  }
}

export default ProtectionService;