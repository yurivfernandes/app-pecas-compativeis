import React, { useState, useEffect } from 'react'; \nimport { \n  View, \n  Text, \n  ScrollView, \n  TouchableOpacity, \n  StyleSheet, \n  RefreshControl, \n  Alert, \n } from 'react-native'; \nimport { Ionicons } from '@expo/vector-icons'; \nimport SecurityMonitoringService, { \n  SecurityMetrics, \n  SecurityAlert, \n  SecurityEvent, \n } from '../../services/SecurityMonitoringService'; \nimport { useResponsive } from '../../hooks/useResponsive'; \n\ninterface SecurityDashboardProps { \n  onClose ?: () => void; \n } \n\nconst SecurityDashboard: React.FC<SecurityDashboardProps> = ({ onClose }) => { \n  const [metrics, setMetrics] = useState<SecurityMetrics | null>(null); \n  const [alerts, setAlerts] = useState<SecurityAlert[]>([]); \n  const [refreshing, setRefreshing] = useState(false); \n  const [selectedTab, setSelectedTab] = useState<'overview' | 'alerts' | 'events' | 'reports'>('overview'); \n  const { isMobile, getStyle } = useResponsive(); \n\n  useEffect(() => { \n    loadData(); \n }, []); \n\n  const loadData = async () => { \n    try { \n      const securityMetrics = SecurityMonitoringService.getSecurityMetrics(); \n      const activeAlerts = SecurityMonitoringService.getActiveAlerts(); \n      \n      setMetrics(securityMetrics); \n      setAlerts(activeAlerts); \n } catch (error) { \n      console.error('Failed to load security data:', error); \n } \n }; \n\n  const handleRefresh = async () => { \n    setRefreshing(true); \n    await loadData(); \n    setRefreshing(false); \n }; \n\n  const handleAcknowledgeAlert = async (alertId: string) => { \n    const success = await SecurityMonitoringService.acknowledgeAlert(alertId); \n    if (success) { \n      await loadData(); \n } \n }; \n\n  const getSeverityColor = (severity: string) => { \n    switch (severity) { \n      case 'critical': return '#DC2626'; \n      case 'high': return '#EA580C'; \n      case 'medium': return '#D97706'; \n      case 'low': return '#65A30D'; \n      default: return '#6B7280'; \n }\n }; \n\n  const getSeverityIcon = (severity: string) => { \n    switch (severity) { \n      case 'critical': return 'alert-circle'; \n      case 'high': return 'warning'; \n      case 'medium': return 'information-circle'; \n      case 'low': return 'checkmark-circle'; \n      default: return 'help-circle'; \n }\n  }; \n\n  const renderOverview = () => { \n    if (!metrics) return null; \n\n    return (\n < View style = { styles.section } >\n < Text style = { styles.sectionTitle } > Visão Geral de Segurança</Text >\n        \n        {/* Métricas principais */ } \n < View style = { [styles.metricsGrid, getStyle({ \n          mobile: { flexDirection: 'column' }, \n          tablet: { flexDirection: 'row', flexWrap: 'wrap' }, \n          desktop: { flexDirection: 'row', flexWrap: 'wrap' }\n })]} >\n < View style = { [styles.metricCard, { backgroundColor: '#FEF2F2' }]} >\n < Ionicons name =\"shield-outline\" size={24} color=\"#DC2626\" />\n            <Text style={styles.metricValue}>{metrics.totalEvents}</Text>\n            <Text style={styles.metricLabel}>Eventos (24h)</Text>\n          </View>\n          \n          <View style={[styles.metricCard, { backgroundColor: '#FEF3C7' }]}>\n            <Ionicons name=\"warning-outline\" size={24} color=\"#D97706\" />\n            <Text style={styles.metricValue}>{alerts.length}</Text>\n            <Text style={styles.metricLabel}>Alertas Ativos</Text>\n          </View>\n          \n          <View style={[styles.metricCard, { backgroundColor: '#F0FDF4' }]}>\n            <Ionicons name=\"trending-up-outline\" size={24} color=\"#16A34A\" />\n            <Text style={styles.metricValue}>{metrics.protectionEffectiveness.toFixed(1)}%</Text>\n            <Text style={styles.metricLabel}>Efetividade</Text>\n          </View>\n          \n          <View style={[styles.metricCard, { backgroundColor: '#F0F9FF' }]}>\n            <Ionicons name=\"pulse-outline\" size={24} color=\"#0284C7\" />\n            <Text style={styles.metricValue}>{metrics.violationRate.toFixed(1)}</Text>\n            <Text style={styles.metricLabel}>Taxa/Hora</Text>\n          </View>\n        </View>\n\n        {/* Eventos por tipo */}\n        <View style={styles.chartSection}>\n          <Text style={styles.chartTitle}>Eventos por Tipo</Text>\n          {Object.entries(metrics.eventsByType).map(([type, count]) => (\n            <View key={type} style={styles.chartItem}>\n              <Text style={styles.chartLabel}>{type.replace('_', ' ')}</Text>\n              <View style={styles.chartBar}>\n                <View \n                  style={[\n                    styles.chartBarFill, \n                    { \n                      width: `${(count / Math.max(...Object.values(metrics.eventsByType))) * 100}%`,\n                      backgroundColor: getSeverityColor('medium')\n                    }\n                  ]} \n                />\n              </View>\n              <Text style={styles.chartValue}>{count}</Text>\n            </View>\n          ))}\n        </View>\n      </View>\n    );\n  };\n\n  const renderAlerts = () => (\n    <View style={styles.section}>\n      <Text style={styles.sectionTitle}>Alertas de Segurança</Text>\n      \n      {alerts.length === 0 ? (\n        <View style={styles.emptyState}>\n          <Ionicons name=\"checkmark-circle-outline\" size={48} color=\"#16A34A\" />\n          <Text style={styles.emptyStateText}>Nenhum alerta ativo</Text>\n          <Text style={styles.emptyStateSubtext}>Sistema funcionando normalmente</Text>\n        </View>\n      ) : (\n        alerts.map((alert) => (\n          <View key={alert.id} style={[\n            styles.alertCard,\n            { borderLeftColor: getSeverityColor(alert.severity) }\n          ]}>\n            <View style={styles.alertHeader}>\n              <View style={styles.alertTitleRow}>\n                <Ionicons \n                  name={getSeverityIcon(alert.severity)} \n                  size={20} \n                  color={getSeverityColor(alert.severity)} \n                />\n                <Text style={styles.alertTitle}>{alert.title}</Text>\n                <View style={[\n                  styles.severityBadge,\n                  { backgroundColor: getSeverityColor(alert.severity) }\n                ]}>\n                  <Text style={styles.severityText}>{alert.severity.toUpperCase()}</Text>\n                </View>\n              </View>\n              <Text style={styles.alertTimestamp}>\n                {new Date(alert.timestamp).toLocaleString()}\n              </Text>\n            </View>\n            \n            <Text style={styles.alertMessage}>{alert.message}</Text>\n            \n            {alert.actions.length > 0 && (\n              <View style={styles.alertActions}>\n                <Text style={styles.actionsTitle}>Ações Recomendadas:</Text>\n                {alert.actions.map((action, index) => (\n                  <Text key={index} style={styles.actionItem}>• {action.replace('_', ' ')}</Text>\n                ))}\n              </View>\n            )}\n            \n            <TouchableOpacity\n              style={styles.acknowledgeButton}\n              onPress={() => handleAcknowledgeAlert(alert.id)}\n            >\n              <Ionicons name=\"checkmark\" size={16} color=\"#FFFFFF\" />\n              <Text style={styles.acknowledgeButtonText}>Reconhecer</Text>\n            </TouchableOpacity>\n          </View>\n        ))\n      )}\n    </View>\n  );\n\n  const renderEvents = () => {\n    if (!metrics) return null;\n\n    return (\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Eventos Recentes</Text>\n        \n        {metrics.recentEvents.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Ionicons name=\"document-outline\" size={48} color=\"#6B7280\" />\n            <Text style={styles.emptyStateText}>Nenhum evento recente</Text>\n          </View>\n        ) : (\n          metrics.recentEvents.map((event) => (\n            <View key={event.id} style={[\n              styles.eventCard,\n              { borderLeftColor: getSeverityColor(event.severity) }\n            ]}>\n              <View style={styles.eventHeader}>\n                <View style={styles.eventTitleRow}>\n                  <Ionicons \n                    name={getSeverityIcon(event.severity)} \n                    size={16} \n                    color={getSeverityColor(event.severity)} \n                  />\n                  <Text style={styles.eventType}>{event.type.replace('_', ' ')}</Text>\n                  {event.resolved && (\n                    <Ionicons name=\"checkmark-circle\" size={16} color=\"#16A34A\" />\n                  )}\n                </View>\n                <Text style={styles.eventTimestamp}>\n                  {new Date(event.timestamp).toLocaleString()}\n                </Text>\n              </View>\n              \n              <Text style={styles.eventDetails}>\n                {JSON.stringify(event.details, null, 2)}\n              </Text>\n            </View>\n          ))\n        )}\n      </View>\n    );\n  };\n\n  const renderReports = () => {\n    const report = SecurityMonitoringService.generateSecurityReport();\n    \n    return (\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Relatório de Segurança</Text>\n        \n        {/* Recomendações */}\n        <View style={styles.recommendationsSection}>\n          <Text style={styles.subsectionTitle}>Recomendações</Text>\n          {report.recommendations.map((rec, index) => (\n            <View key={index} style={styles.recommendationItem}>\n              <Ionicons name=\"bulb-outline\" size={16} color=\"#D97706\" />\n              <Text style={styles.recommendationText}>{rec}</Text>\n            </View>\n          ))}\n        </View>\n        \n        {/* Tendências */}\n        <View style={styles.trendsSection}>\n          <Text style={styles.subsectionTitle}>Tendências (7 dias)</Text>\n          <View style={styles.trendItem}>\n            <Text style={styles.trendLabel}>Tendência Geral:</Text>\n            <View style={[\n              styles.trendBadge,\n              { \n                backgroundColor: report.trends.trend === 'increasing' ? '#FEE2E2' : \n                                report.trends.trend === 'decreasing' ? '#F0FDF4' : '#F3F4F6'\n              }\n            ]}>\n              <Text style={[\n                styles.trendText,\n                { \n                  color: report.trends.trend === 'increasing' ? '#DC2626' : \n                        report.trends.trend === 'decreasing' ? '#16A34A' : '#6B7280'\n                }\n              ]}>\n                {report.trends.trend === 'increasing' ? '↗️ Aumentando' :\n                 report.trends.trend === 'decreasing' ? '↘️ Diminuindo' : '➡️ Estável'}\n              </Text>\n            </View>\n          </View>\n        </View>\n        \n        {/* Ações de exportação */}\n        <View style={styles.actionsSection}>\n          <TouchableOpacity\n            style={styles.exportButton}\n            onPress={() => {\n              const data = SecurityMonitoringService.exportSecurityData();\n              Alert.alert(\n                'Dados Exportados',\n                `Dados de segurança exportados:\\n\\n${JSON.stringify(data, null, 2).substring(0, 200)}...`,\n                [{ text: 'OK' }]\n              );\n            }}\n          >\n            <Ionicons name=\"download-outline\" size={16} color=\"#FFFFFF\" />\n            <Text style={styles.exportButtonText}>Exportar Dados</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  };\n\n  const renderTabContent = () => {\n    switch (selectedTab) {\n      case 'overview': return renderOverview();\n      case 'alerts': return renderAlerts();\n      case 'events': return renderEvents();\n      case 'reports': return renderReports();\n      default: return renderOverview();\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Dashboard de Segurança</Text>\n        {onClose && (\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <Ionicons name=\"close\" size={24} color=\"#6B7280\" />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Tabs */}\n      <View style={styles.tabsContainer}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          {[\n            { key: 'overview', label: 'Visão Geral', icon: 'analytics-outline' },\n            { key: 'alerts', label: 'Alertas', icon: 'warning-outline' },\n            { key: 'events', label: 'Eventos', icon: 'list-outline' },\n            { key: 'reports', label: 'Relatórios', icon: 'document-text-outline' },\n          ].map((tab) => (\n            <TouchableOpacity\n              key={tab.key}\n              style={[\n                styles.tab,\n                selectedTab === tab.key && styles.activeTab\n              ]}\n              onPress={() => setSelectedTab(tab.key as any)}\n            >\n              <Ionicons \n                name={tab.icon as any} \n                size={16} \n                color={selectedTab === tab.key ? '#DC2626' : '#6B7280'} \n              />\n              <Text style={[\n                styles.tabText,\n                selectedTab === tab.key && styles.activeTabText\n              ]}>\n                {tab.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* Content */}\n      <ScrollView\n        style={styles.content}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />\n        }\n      >\n        {renderTabContent()}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#111827',\n  },\n  closeButton: {\n    padding: 8,\n  },\n  tabsContainer: {\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E7EB',\n  },\n  tab: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 8,\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: '#DC2626',\n  },\n  tabText: {\n    fontSize: 14,\n    color: '#6B7280',\n  },\n  activeTabText: {\n    color: '#DC2626',\n    fontWeight: '600',\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#111827',\n    marginBottom: 16,\n  },\n  metricsGrid: {\n    gap: 12,\n    marginBottom: 24,\n  },\n  metricCard: {\n    flex: 1,\n    minWidth: 120,\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    gap: 8,\n  },\n  metricValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#111827',\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: '#6B7280',\n    textAlign: 'center',\n  },\n  chartSection: {\n    marginBottom: 24,\n  },\n  chartTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#111827',\n    marginBottom: 12,\n  },\n  chartItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n    gap: 12,\n  },\n  chartLabel: {\n    fontSize: 14,\n    color: '#374151',\n    width: 120,\n    textTransform: 'capitalize',\n  },\n  chartBar: {\n    flex: 1,\n    height: 8,\n    backgroundColor: '#F3F4F6',\n    borderRadius: 4,\n  },\n  chartBarFill: {\n    height: '100%',\n    borderRadius: 4,\n  },\n  chartValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#111827',\n    width: 30,\n    textAlign: 'right',\n  },\n  alertCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    borderLeftWidth: 4,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  alertHeader: {\n    marginBottom: 8,\n  },\n  alertTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  alertTitle: {\n    flex: 1,\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#111827',\n  },\n  severityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  severityText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  alertTimestamp: {\n    fontSize: 12,\n    color: '#6B7280',\n  },\n  alertMessage: {\n    fontSize: 14,\n    color: '#374151',\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  alertActions: {\n    marginBottom: 12,\n  },\n  actionsTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#111827',\n    marginBottom: 4,\n  },\n  actionItem: {\n    fontSize: 12,\n    color: '#6B7280',\n    marginLeft: 8,\n  },\n  acknowledgeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#16A34A',\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n    gap: 4,\n    alignSelf: 'flex-start',\n  },\n  acknowledgeButtonText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n  eventCard: {\n    backgroundColor: '#F9FAFB',\n    borderRadius: 6,\n    borderLeftWidth: 3,\n    padding: 12,\n    marginBottom: 8,\n  },\n  eventHeader: {\n    marginBottom: 8,\n  },\n  eventTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 2,\n  },\n  eventType: {\n    flex: 1,\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#111827',\n    textTransform: 'capitalize',\n  },\n  eventTimestamp: {\n    fontSize: 11,\n    color: '#6B7280',\n  },\n  eventDetails: {\n    fontSize: 11,\n    color: '#6B7280',\n    fontFamily: 'monospace',\n    backgroundColor: '#F3F4F6',\n    padding: 8,\n    borderRadius: 4,\n  },\n  emptyState: {\n    alignItems: 'center',\n    padding: 32,\n  },\n  emptyStateText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#6B7280',\n    marginTop: 12,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: '#9CA3AF',\n    marginTop: 4,\n  },\n  subsectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#111827',\n    marginBottom: 12,\n  },\n  recommendationsSection: {\n    marginBottom: 24,\n  },\n  recommendationItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    marginBottom: 8,\n  },\n  recommendationText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#374151',\n    lineHeight: 20,\n  },\n  trendsSection: {\n    marginBottom: 24,\n  },\n  trendItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  trendLabel: {\n    fontSize: 14,\n    color: '#374151',\n  },\n  trendBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  trendText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  actionsSection: {\n    marginTop: 16,\n  },\n  exportButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#DC2626',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  exportButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#FFFFFF',\n  },\n});\n\nexport default SecurityDashboard;" }
ToolResult: SUCCESS - Created the golf - mk3 - app / src / components / admin / SecurityDashboard.tsx file. 
< function_calls >
    <invoke name="fsWrite">
        <parameter name="path">golf-mk3-app/src/hooks/useSecurityMonitoring.ts