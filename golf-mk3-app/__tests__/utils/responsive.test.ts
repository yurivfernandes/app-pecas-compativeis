import {\n  getDeviceType,\n  isMobile,\n  isTablet,\n  isDesktop,\n  scale,\n  verticalScale,\n  moderateScale,\n  getGridColumns,\n  getGridItemWidth,\n  getFontSize,\n  getSpacing,\n  getOrientation,\n  isLandscape,\n  isPortrait,\n  getCardConfig,\n  getListConfig,\n  getPerformanceConfig,\n  renderForDevice,\n} from '../../src/utils/responsive';\n\n// Mock Dimensions\nconst mockDimensions = {\n  get: jest.fn(),\n};\n\njest.mock('react-native', () => ({\n  Dimensions: mockDimensions,\n  Platform: { OS: 'ios' },\n  PixelRatio: {\n    get: () => 2,\n    getFontScale: () => 1,\n  },\n}));\n\ndescribe('Responsive Utils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Device Type Detection', () => {\n    it('should detect mobile device', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      expect(getDeviceType()).toBe('mobile');\n      expect(isMobile()).toBe(true);\n      expect(isTablet()).toBe(false);\n      expect(isDesktop()).toBe(false);\n    });\n\n    it('should detect tablet device', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      expect(getDeviceType()).toBe('tablet');\n      expect(isMobile()).toBe(false);\n      expect(isTablet()).toBe(true);\n      expect(isDesktop()).toBe(false);\n    });\n\n    it('should detect desktop device', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      expect(getDeviceType()).toBe('desktop');\n      expect(isMobile()).toBe(false);\n      expect(isTablet()).toBe(false);\n      expect(isDesktop()).toBe(true);\n    });\n\n    it('should detect large desktop device', () => {\n      mockDimensions.get.mockReturnValue({ width: 1600, height: 900 });\n      expect(getDeviceType()).toBe('largeDesktop');\n      expect(isDesktop()).toBe(true); // Should return true for both desktop and largeDesktop\n    });\n  });\n\n  describe('Scaling Functions', () => {\n    beforeEach(() => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n    });\n\n    it('should scale dimensions correctly', () => {\n      const scaledValue = scale(20);\n      expect(scaledValue).toBe(20); // 375/375 * 20 = 20\n    });\n\n    it('should scale vertically correctly', () => {\n      const scaledValue = verticalScale(20);\n      expect(scaledValue).toBe(20); // 812/812 * 20 = 20\n    });\n\n    it('should moderate scale correctly', () => {\n      mockDimensions.get.mockReturnValue({ width: 750, height: 812 });\n      const scaledValue = moderateScale(20, 0.5);\n      const expectedScale = scale(20);\n      const expected = 20 + (expectedScale - 20) * 0.5;\n      expect(scaledValue).toBe(expected);\n    });\n\n    it('should use default factor for moderate scale', () => {\n      const scaledValue = moderateScale(20);\n      expect(typeof scaledValue).toBe('number');\n    });\n  });\n\n  describe('Grid Functions', () => {\n    beforeEach(() => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n    });\n\n    it('should calculate grid columns correctly', () => {\n      const columns = getGridColumns(100, 16);\n      // Available width: 375 - 32 = 343\n      // Items per row: floor((343 + 16) / (100 + 16)) = floor(359 / 116) = 3\n      expect(columns).toBe(3);\n    });\n\n    it('should return at least 1 column', () => {\n      const columns = getGridColumns(400, 16); // Very wide items\n      expect(columns).toBe(1);\n    });\n\n    it('should calculate grid item width correctly', () => {\n      const itemWidth = getGridItemWidth(2, 16);\n      // Available width: 375 - 32 = 343\n      // Total spacing: (2-1) * 16 = 16\n      // Item width: (343 - 16) / 2 = 163.5\n      expect(itemWidth).toBe(163.5);\n    });\n  });\n\n  describe('Responsive Values', () => {\n    it('should return mobile font size', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const fontSize = getFontSize({ mobile: 16, tablet: 18, desktop: 20 });\n      expect(fontSize).toBe(16);\n    });\n\n    it('should return tablet font size', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const fontSize = getFontSize({ mobile: 16, tablet: 18, desktop: 20 });\n      expect(fontSize).toBe(18);\n    });\n\n    it('should return desktop font size', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const fontSize = getFontSize({ mobile: 16, tablet: 18, desktop: 20 });\n      expect(fontSize).toBe(20);\n    });\n\n    it('should fallback to mobile size when tablet not provided', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const fontSize = getFontSize({ mobile: 16 });\n      expect(fontSize).toBe(16 * 1.1); // mobile * 1.1\n    });\n\n    it('should return mobile spacing', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const spacing = getSpacing({ mobile: 16, tablet: 20, desktop: 24 });\n      expect(spacing).toBe(16);\n    });\n\n    it('should return tablet spacing', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const spacing = getSpacing({ mobile: 16, tablet: 20, desktop: 24 });\n      expect(spacing).toBe(20);\n    });\n\n    it('should return desktop spacing', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const spacing = getSpacing({ mobile: 16, tablet: 20, desktop: 24 });\n      expect(spacing).toBe(24);\n    });\n  });\n\n  describe('Orientation Detection', () => {\n    it('should detect portrait orientation', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      expect(getOrientation()).toBe('portrait');\n      expect(isPortrait()).toBe(true);\n      expect(isLandscape()).toBe(false);\n    });\n\n    it('should detect landscape orientation', () => {\n      mockDimensions.get.mockReturnValue({ width: 812, height: 375 });\n      expect(getOrientation()).toBe('landscape');\n      expect(isPortrait()).toBe(false);\n      expect(isLandscape()).toBe(true);\n    });\n  });\n\n  describe('Configuration Functions', () => {\n    it('should return mobile card config', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const config = getCardConfig();\n      expect(config).toEqual({\n        padding: 16,\n        borderRadius: 8,\n        margin: 8,\n        columns: 1,\n      });\n    });\n\n    it('should return tablet card config', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const config = getCardConfig();\n      expect(config).toEqual({\n        padding: 20,\n        borderRadius: 12,\n        margin: 12,\n        columns: 2,\n      });\n    });\n\n    it('should return desktop card config', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const config = getCardConfig();\n      expect(config).toEqual({\n        padding: 24,\n        borderRadius: 16,\n        margin: 16,\n        columns: 3,\n      });\n    });\n\n    it('should return mobile list config', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const config = getListConfig();\n      expect(config.numColumns).toBe(1);\n      expect(config.itemHeight).toBe(120);\n      expect(config.spacing).toBe(8);\n      expect(config.padding).toBe(16);\n    });\n\n    it('should return tablet list config', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const config = getListConfig();\n      expect(config.numColumns).toBe(2);\n      expect(config.itemHeight).toBe(140);\n      expect(config.spacing).toBe(12);\n      expect(config.padding).toBe(20);\n    });\n\n    it('should return desktop list config', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const config = getListConfig();\n      expect(config.numColumns).toBe(3);\n      expect(config.itemHeight).toBe(140);\n      expect(config.spacing).toBe(12);\n      expect(config.padding).toBe(20);\n    });\n  });\n\n  describe('Performance Configuration', () => {\n    it('should return mobile performance config', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const config = getPerformanceConfig();\n      expect(config.initialNumToRender).toBe(5);\n      expect(config.windowSize).toBe(5);\n      expect(config.maxToRenderPerBatch).toBe(5);\n      expect(config.removeClippedSubviews).toBe(true);\n      expect(config.searchDebounce).toBe(300);\n    });\n\n    it('should return desktop performance config', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const config = getPerformanceConfig();\n      expect(config.initialNumToRender).toBe(8);\n      expect(config.windowSize).toBe(10);\n      expect(config.maxToRenderPerBatch).toBe(10);\n      expect(config.removeClippedSubviews).toBe(false);\n      expect(config.searchDebounce).toBe(200);\n    });\n\n    it('should return correct image quality based on pixel ratio', () => {\n      const config = getPerformanceConfig();\n      expect(config.imageQuality).toBe('medium'); // PixelRatio.get() returns 2\n    });\n  });\n\n  describe('Conditional Rendering', () => {\n    it('should render mobile component', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const result = renderForDevice({\n        mobile: 'Mobile Component',\n        tablet: 'Tablet Component',\n        desktop: 'Desktop Component',\n      });\n      expect(result).toBe('Mobile Component');\n    });\n\n    it('should render tablet component', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const result = renderForDevice({\n        mobile: 'Mobile Component',\n        tablet: 'Tablet Component',\n        desktop: 'Desktop Component',\n      });\n      expect(result).toBe('Tablet Component');\n    });\n\n    it('should render desktop component', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const result = renderForDevice({\n        mobile: 'Mobile Component',\n        tablet: 'Tablet Component',\n        desktop: 'Desktop Component',\n      });\n      expect(result).toBe('Desktop Component');\n    });\n\n    it('should fallback to mobile when specific component not available', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const result = renderForDevice({\n        mobile: 'Mobile Component',\n        desktop: 'Desktop Component',\n      });\n      expect(result).toBe('Mobile Component');\n    });\n\n    it('should fallback through hierarchy when components not available', () => {\n      mockDimensions.get.mockReturnValue({ width: 1200, height: 800 });\n      const result = renderForDevice({\n        mobile: 'Mobile Component',\n      });\n      expect(result).toBe('Mobile Component');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle zero dimensions', () => {\n      mockDimensions.get.mockReturnValue({ width: 0, height: 0 });\n      expect(getDeviceType()).toBe('mobile'); // Should default to mobile\n    });\n\n    it('should handle negative dimensions', () => {\n      mockDimensions.get.mockReturnValue({ width: -100, height: -100 });\n      expect(getDeviceType()).toBe('mobile'); // Should default to mobile\n    });\n\n    it('should handle very large dimensions', () => {\n      mockDimensions.get.mockReturnValue({ width: 10000, height: 10000 });\n      expect(getDeviceType()).toBe('largeDesktop');\n    });\n\n    it('should handle missing tablet/desktop values in responsive functions', () => {\n      mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n      const fontSize = getFontSize({ mobile: 16 });\n      expect(fontSize).toBe(16 * 1.1); // Should apply default multiplier\n    });\n\n    it('should handle grid calculations with zero spacing', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const columns = getGridColumns(100, 0);\n      expect(columns).toBeGreaterThan(0);\n    });\n\n    it('should handle grid calculations with very small item width', () => {\n      mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n      const columns = getGridColumns(1, 16);\n      expect(columns).toBeGreaterThan(0);\n    });\n  });\n});\n\n// Test dimension listener functionality\ndescribe('Dimension Listener', () => {\n  it('should create and cleanup dimension listener', () => {\n    const mockAddEventListener = jest.fn();\n    const mockRemoveEventListener = jest.fn();\n    \n    mockDimensions.addEventListener = mockAddEventListener;\n    \n    const mockSubscription = {\n      remove: mockRemoveEventListener,\n    };\n    \n    mockAddEventListener.mockReturnValue(mockSubscription);\n    \n    const { createDimensionListener } = require('../../src/utils/responsive');\n    \n    const callback = jest.fn();\n    const cleanup = createDimensionListener(callback);\n    \n    expect(mockAddEventListener).toHaveBeenCalledWith('change', callback);\n    \n    cleanup();\n    expect(mockRemoveEventListener).toHaveBeenCalled();\n  });\n});"} 
ToolResult: SUCCESS - Created the golf-mk3-app/__tests__/utils/responsive.test.ts file. 
Agora vou instalar as dependências de teste e executar os testes:

<function_calls>
<invoke name="executeBash">
<parameter name="command">npm install --save-dev jest @testing-library/react-native @testing-library/jest-native @types/jest