import React from 'react'; \nimport { render, fireEvent, waitFor } from '@testing-library/react-native'; \nimport { NavigationContainer } from '@react-navigation/native'; \nimport App from '../../App'; \n\n// Mock dependencies\njest.mock('../../src/services/AnalyticsService');\njest.mock('../../src/services/ErrorRecoveryService');\njest.mock('@expo/vector-icons', () => ({\n  Ionicons: 'Ionicons',\n}));\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  getAllKeys: jest.fn(),\n  multiRemove: jest.fn(),\n}));\n\n// Mock react-native-safe-area-context\njest.mock('react-native-safe-area-context', () => ({\n  SafeAreaProvider: ({ children }: any) => children,\n  useSafeAreaInsets: () => ({ top: 0, bottom: 0, left: 0, right: 0 }),\n}));\n\n// Mock Dimensions\njest.mock('react-native', () => {\n  const RN = jest.requireActual('react-native');\n  return {\n    ...RN,\n    Dimensions: {\n      get: jest.fn(() => ({ width: 375, height: 812 })),\n      addEventListener: jest.fn(),\n    },\n  };\n});\n\ndescribe('Navigation Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render main navigation tabs', async () => {\n    const { getByText, getByTestId } = render(<App />);\n\n    // Check if all main tabs are present\n    await waitFor(() => {\n      expect(getByText('Início')).toBeTruthy();\n      expect(getByText('Peças')).toBeTruthy();\n      expect(getByText('Cores')).toBeTruthy();\n      expect(getByText('Fusíveis')).toBeTruthy();\n    });\n  });\n\n  it('should navigate between tabs', async () => {\n    const { getByText } = render(<App />);\n\n    // Start on Home tab\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n\n    // Navigate to Peças tab\n    fireEvent.press(getByText('Peças'));\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n\n    // Navigate to Cores tab\n    fireEvent.press(getByText('Cores'));\n    await waitFor(() => {\n      expect(getByText('Tabela de Cores VW')).toBeTruthy();\n    });\n\n    // Navigate to Fusíveis tab\n    fireEvent.press(getByText('Fusíveis'));\n    await waitFor(() => {\n      expect(getByText('Mapa de Fusíveis')).toBeTruthy();\n    });\n\n    // Navigate back to Home\n    fireEvent.press(getByText('Início'));\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n  });\n\n  it('should display correct headers for each tab', async () => {\n    const { getByText } = render(<App />);\n\n    // Check Home header\n    await waitFor(() => {\n      expect(getByText('Golf MK3 - Peças Compatíveis')).toBeTruthy();\n    });\n\n    // Navigate and check Peças header\n    fireEvent.press(getByText('Peças'));\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n\n    // Navigate and check Cores header\n    fireEvent.press(getByText('Cores'));\n    await waitFor(() => {\n      expect(getByText('Tabela de Cores VW')).toBeTruthy();\n    });\n\n    // Navigate and check Fusíveis header\n    fireEvent.press(getByText('Fusíveis'));\n    await waitFor(() => {\n      expect(getByText('Mapa de Fusíveis')).toBeTruthy();\n    });\n  });\n\n  it('should maintain navigation state', async () => {\n    const { getByText, rerender } = render(<App />);\n\n    // Navigate to Peças tab\n    fireEvent.press(getByText('Peças'));\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n\n    // Rerender component (simulating app state change)\n    rerender(<App />);\n\n    // Should still be on Peças tab\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n  });\n\n  it('should handle navigation errors gracefully', async () => {\n    const consoleError = jest.spyOn(console, 'error').mockImplementation();\n    \n    // Mock navigation error\n    const NavigationContainerWithError = ({ children }: any) => {\n      throw new Error('Navigation error');\n    };\n\n    const AppWithError = () => (\n      <NavigationContainerWithError>\n        {/* App content */}\n      </NavigationContainerWithError>\n    );\n\n    // Should not crash the app\n    expect(() => render(<AppWithError />)).not.toThrow();\n\n    consoleError.mockRestore();\n  });\n\n  it('should render responsive navigation based on screen size', async () => {\n    // Mock mobile dimensions\n    const mockDimensions = require('react-native').Dimensions;\n    mockDimensions.get.mockReturnValue({ width: 375, height: 812 });\n\n    const { getByText } = render(<App />);\n\n    await waitFor(() => {\n      expect(getByText('Início')).toBeTruthy();\n    });\n\n    // Mock tablet dimensions\n    mockDimensions.get.mockReturnValue({ width: 768, height: 1024 });\n\n    // Trigger dimension change (would normally be handled by dimension listener)\n    // For this test, we just verify the component renders without errors\n    expect(getByText('Início')).toBeTruthy();\n  });\n\n  it('should handle deep linking navigation', async () => {\n    // This would test deep linking if implemented\n    // For now, just verify basic navigation works\n    const { getByText } = render(<App />);\n\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n  });\n\n  it('should track navigation events', async () => {\n    const { AnalyticsService } = require('../../src/services/AnalyticsService');\n    const { getByText } = render(<App />);\n\n    // Navigate to different tabs\n    fireEvent.press(getByText('Peças'));\n    fireEvent.press(getByText('Cores'));\n    fireEvent.press(getByText('Fusíveis'));\n\n    await waitFor(() => {\n      // Verify analytics tracking was called\n      // (Implementation would depend on how navigation tracking is set up)\n      expect(AnalyticsService.trackEvent).toHaveBeenCalled();\n    });\n  });\n\n  it('should handle accessibility navigation', async () => {\n    const { getByText, getByRole } = render(<App />);\n\n    // Check if tabs have proper accessibility roles\n    const homeTab = getByText('Início');\n    expect(homeTab).toBeTruthy();\n\n    // Test keyboard navigation (if supported)\n    fireEvent(homeTab, 'focus');\n    fireEvent(homeTab, 'keyPress', { nativeEvent: { key: 'Enter' } });\n\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n  });\n\n  it('should handle navigation with error boundary', async () => {\n    const { getByText } = render(<App />);\n\n    // Verify error boundary is working\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n\n    // Navigation should work normally\n    fireEvent.press(getByText('Peças'));\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n  });\n\n  it('should preserve scroll position when navigating', async () => {\n    const { getByText, getByTestId } = render(<App />);\n\n    // This test would verify scroll position preservation\n    // Implementation depends on how scroll state is managed\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n\n    fireEvent.press(getByText('Peças'));\n    fireEvent.press(getByText('Início'));\n\n    // Should return to same scroll position\n    await waitFor(() => {\n      expect(getByText('Golf MK3')).toBeTruthy();\n    });\n  });\n});\n\n// Test navigation performance\ndescribe('Navigation Performance Tests', () => {\n  it('should render tabs quickly', async () => {\n    const startTime = Date.now();\n    \n    const { getByText } = render(<App />);\n    \n    await waitFor(() => {\n      expect(getByText('Início')).toBeTruthy();\n    });\n    \n    const renderTime = Date.now() - startTime;\n    \n    // Should render within reasonable time (adjust threshold as needed)\n    expect(renderTime).toBeLessThan(1000);\n  });\n\n  it('should navigate between tabs quickly', async () => {\n    const { getByText } = render(<App />);\n\n    await waitFor(() => {\n      expect(getByText('Início')).toBeTruthy();\n    });\n\n    const startTime = Date.now();\n    \n    fireEvent.press(getByText('Peças'));\n    \n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n    \n    const navigationTime = Date.now() - startTime;\n    \n    // Navigation should be fast\n    expect(navigationTime).toBeLessThan(500);\n  });\n});\n\n// Test navigation accessibility\ndescribe('Navigation Accessibility Tests', () => {\n  it('should have proper accessibility labels', async () => {\n    const { getByLabelText } = render(<App />);\n\n    // Check if tabs have accessibility labels\n    // (Implementation depends on how accessibility is set up)\n    await waitFor(() => {\n      // These would be the actual accessibility labels\n      expect(getByLabelText('Ir para início') || getByLabelText('Início')).toBeTruthy();\n    });\n  });\n\n  it('should support screen reader navigation', async () => {\n    // Mock screen reader\n    const mockAccessibilityInfo = {\n      isScreenReaderEnabled: jest.fn().mockResolvedValue(true),\n      announceForAccessibility: jest.fn(),\n    };\n\n    jest.doMock('react-native', () => ({\n      ...jest.requireActual('react-native'),\n      AccessibilityInfo: mockAccessibilityInfo,\n    }));\n\n    const { getByText } = render(<App />);\n\n    fireEvent.press(getByText('Peças'));\n\n    await waitFor(() => {\n      expect(getByText('Peças Compatíveis')).toBeTruthy();\n    });\n\n    // Verify screen reader announcements\n    expect(mockAccessibilityInfo.announceForAccessibility).toHaveBeenCalled();\n  });\n});"} 
ToolResult: SUCCESS - Created the golf - mk3 - app / __tests__ / integration / navigation.test.tsx file. 
< function_calls >
    <invoke name="fsWrite">
        <parameter name="path">golf-mk3-app/__tests__/components/ErrorBoundary.test.tsx